importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.rpc );
importPackage( dw.svc );
importPackage( dw.net );
importPackage( dw.ws );

ServiceRegistry.configure("XiPayTokenize",{
	createRequest: function(service : Service, params : Object){
		var httppart=new Array();
		for(var param in params){
			httppart.push(new HTTPRequestPart(param,params[param]));
		}
		return httppart;
	},
	execute: function(service : Service, data : Object){
		var client : HTTPClient = new HTTPClient();
		client.open("POST", service.configuration.credential.URL);
		client.setTimeout(service.configuration.profile.timeoutMillis);
		client.sendMultiPart(data.toArray());
		if(client.statusCode<500){
			var nextLocation : String = client.getResponseHeader("Location");
			Logger.getLogger("service.XiPayTokenize.comm").debug("going to: "+nextLocation);
			client.open("GET", nextLocation);
			client.send();
			if(client.statusCode<500){
				return client.text;
			}else{
				throw new Error("Error in tokenize service at "+nextLocation+" Could not get token after redirect. Response:\n"+client.errorText);
			}
		}else{
			throw new Error("Error in tokenize service at "+service.configuration.credential.URL+" Could not get token before redirect. Response:\n"+client.errorText);
		}
	},
	parseResponse : function(service : Service, response : Object) : Object {
		var r = response.match(/<span.+?id="Token".*?>(.*?)<\/span>/);
		return r[1];
	}
});

ServiceRegistry.configure("XiInterceptiFrame",{
	parseResponse : function(service : Service, client : Object) : Object {
		var merchantRequest = client.text.match(/UpdatePaymentPageContent\(\"(.*?)\"\);/)[1];
		var viewstate = client.text.match(/name=\"__VIEWSTATE\".*?value=\"(.*?)\"/)[1];
		var viewstategenerator = client.text.match(/name=\"__VIEWSTATEGENERATOR\".*?value=\"(.*?)\"/)[1];
		return {'Paymetric_Packet': merchantRequest, 'VIEWSTATE': viewstate, 'VIEWSTATEGENERATOR': viewstategenerator};
	}
});

